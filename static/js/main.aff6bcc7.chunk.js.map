{"version":3,"sources":["Api.js","Components/Answer.js","Components/Question.js","Components/Score.js","Components/StartButton.js","Components/NextButton.js","Components/Quiz.js","store/actions.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["QuizApi","_this","this","Object","classCallCheck","initToken","axios","get","tokenURL","then","response","setToken","data","token","getToken","localStorage","getItem","setItem","resetToken","parseResponse","response_code","fetchQuestions","number","arguments","length","undefined","Error","tokenPart","apiURL","concat","console","log","results","forEach","item","i","answers","incorrect_answers","push","correct_answer","a","j","Math","floor","random","_ref","shuffle","question","correctAnswer","baseURL","Answer","react_default","createElement","className","props","answerStyle","dangerouslySetInnerHTML","__html","answer","onClick","e","click","answerId","Component","Question","questionNumber","map","id","Components_Answer","answerStyles","Score","currentScore","StartButton","NextButton","Quiz","possibleConstructorReturn","getPrototypeOf","call","getCurrentQuestion","bind","assertThisInitialized","getCurrentAnswer","startButtonClickHandler","nextButtonClickHandler","answerClickHandler","dispatch","type","quizApi","payload","currentQuestion","isValidating","makeSelection","_this2","styles","fill","currentSelection","questions","nextButton","startButton","Components_StartButton","isStarted","isFinished","score","isFetching","Components_NextButton","theCurrentQuestion","Components_Question","getAnswerButtonStyles","Components_Score","connect","state","App","Components_Quiz","Boolean","window","location","hostname","match","initialState","store","createStore","action","objectSpread","applyMiddleware","thunkMiddleware","app","es","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aff6bcc7.chunk.js","sourcesContent":["import axios from 'axios';\n\n\nclass QuizApi {\n\n  constructor() {\n    this.baseURL = 'https://opentdb.com/';\n    this.apiURL = this.baseURL + 'api.php?type=multiple';\n    this.tokenURL = this.baseURL + 'api_token.php';\n  }\n\n  initToken = () => {\n    return axios.get(this.tokenURL + '?command=request')\n      .then((response) => {\n        this.setToken(response.data.token);\n      });\n  }\n\n  getToken = () => {\n    return localStorage.getItem('quizToken');\n  }\n\n  setToken = (token) => {\n    localStorage.setItem('quizToken', token);\n  }\n\n  resetToken = () => {\n    const token = this.getToken();\n    return axios.get(this.tokenURL + '?command=reset&token=' + token)\n      .then((response) => {\n        this.setToken(response.data.token);\n      });\n  }\n\n  parseResponse = (response) => {\n    const response_code = response.data.response_code;\n    if (response_code === 4) {\n      this.resetToken();\n    }\n  }\n\n  fetchQuestions = (number = 10) => {\n    if (number < 1 || number > 50) {\n      throw new Error('Invalid number of questions to fetch [1 - 50]');\n    }\n    let tokenPart = null;\n    const token = this.getToken();\n    tokenPart = token === null? null : '&token=' + token;\n    return axios.get(this.apiURL + `&amount=${number}${tokenPart}`)\n      .then((response) => {\n        const shuffle = (a) => {\n          for (let i = a.length - 1; i > 0; i--) {\n              const j = Math.floor(Math.random() * (i + 1));\n              [a[i], a[j]] = [a[j], a[i]];\n          }\n        }\n\n        const data = []\n        console.log(response);\n        response.data.results.forEach((item, i) => {\n          const answers = item.incorrect_answers;\n          answers.push(item.correct_answer);\n          shuffle(answers);\n          data[i] = {\n            question: item.question,\n            correctAnswer: item.correct_answer,\n            answers: answers\n          }\n        });\n        return data\n      });\n  }\n}\n\nexport default QuizApi;\n","import React, { Component } from 'react';\n\nclass Answer extends Component {\n  render() {\n    return (\n      <button\n        className={this.props.answerStyle}\n        dangerouslySetInnerHTML={{__html: this.props.answer}}\n        onClick={(e) => this.props.click(this.props.answer, this.props.answerId, e)}>\n      </button>\n    );\n  }\n}\n\n\nexport default Answer;\n","import React, { Component } from 'react';\n\nimport Answer from './Answer';\n\nclass Question extends Component {\n  render() {\n    return (\n      <div>\n        <p><strong>Question {this.props.questionNumber}</strong></p>\n        <div className=\"question-box\">\n          <p dangerouslySetInnerHTML={{__html: this.props.question}}></p>\n        </div>\n        <div className=\"answer-box\">\n          {\n            this.props.answers.map((item, id) => {\n              return <Answer answer={item}\n                             answerId={id}\n                             answerStyle={this.props.answerStyles[id]}\n                             click={this.props.click} />\n            })\n          }\n        </div>\n      </div>\n      );\n  }\n}\n\nexport default Question;\n","import React, { Component } from 'react';\n\nclass Score extends Component {\n  render() {\n    return <p><strong>Score: </strong>{this.props.currentScore}/10</p>\n  }\n}\n\n\nexport default Score;\n","import React, { Component } from 'react';\n\nclass StartButton extends Component {\n  render() {\n    return <button className=\"start-button\" onClick={this.props.click}>Start!</button>\n  }\n}\n\nexport default StartButton;\n","import React, { Component } from 'react';\n\nclass NextButton extends Component {\n  render() {\n    return <button className=\"next-button\" onClick={this.props.click}>Next</button>\n  }\n}\n\n\nexport default NextButton;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  fetchQuestions,\n  fetchQuestion,\n  startQuiz,\n  incrementScore,\n  endQuiz,\n  endValidation,\n  startValidation,\n  makeSelection\n} from '../store/actions';\n\nimport Question from './Question';\nimport Score from './Score';\nimport StartButton from './StartButton';\nimport NextButton from './NextButton';\n\nclass Quiz extends Component {\n\n  constructor(props) {\n    super(props);\n    this.getCurrentQuestion = this.getCurrentQuestion.bind(this);\n    this.getCurrentAnswer = this.getCurrentAnswer.bind(this);\n    this.startButtonClickHandler = this.startButtonClickHandler.bind(this);\n    this.nextButtonClickHandler = this.nextButtonClickHandler.bind(this);\n    this.answerClickHandler = this.answerClickHandler.bind(this);\n  }\n\n  componentDidMount() {\n  }\n\n  startButtonClickHandler(e) {\n    this.props.dispatch(startQuiz());\n    this.props.dispatch(fetchQuestions());\n  }\n\n  nextButtonClickHandler(e) {\n    this.props.dispatch(endValidation());\n    if (this.props.currentQuestion < 9) {\n      this.props.dispatch(fetchQuestion());\n    }\n    else {\n      this.props.dispatch(endQuiz());\n    }\n  }\n\n  answerClickHandler(answer, answerId, e) {\n    if (!this.props.isValidating) {\n      this.props.dispatch(startValidation());\n      this.props.dispatch(makeSelection(answerId));\n      if (answer === this.getCurrentQuestion().correctAnswer) {\n        this.props.dispatch(incrementScore());\n      }\n      if (this.props.currentQuestion > 9) {\n        this.props.dispatch(endQuiz());\n      }\n    }\n  }\n\n  getAnswerButtonStyles() {\n    const styles = [0, 0, 0 ,0];\n    styles.fill('answer-button', 0, 4);\n    if (this.props.isValidating) {\n      styles.fill('answer-button-done', 0, 4);\n      this.getCurrentQuestion().answers.forEach((item, id) => {\n        if (id === this.props.currentSelection) {\n          styles[id] = 'answer-button-done answer-button-incorrect';\n        }\n        if (item === this.getCurrentAnswer()) {\n          styles[id] = 'answer-button-done answer-button-correct';\n        }\n      });\n    }\n    return styles;\n  }\n\n  getCurrentQuestion() {\n    return this.props.questions[this.props.currentQuestion];\n  }\n\n  getCurrentAnswer() {\n    return this.getCurrentQuestion().correctAnswer;\n  }\n\n  getCurrentSelectedAnswer() {\n    return this.getCurrentQuestion().answers[this.props.currentSelection];\n  }\n\n  render() {\n    const startButton = <StartButton click={this.startButtonClickHandler} />;\n    if (!this.props.isStarted) {\n      return startButton;\n    }\n\n    if (this.props.isFinished) {\n      return (\n        <div>\n          <p>You scored {this.props.score}/10 !</p>\n          {startButton}\n        </div>\n      );\n    }\n\n    if (this.props.isFetching) {\n      return <p>Loading...</p>\n    }\n    else {\n      let nextButton;\n      if (this.props.isValidating) {\n        nextButton = <NextButton click={this.nextButtonClickHandler} />\n      }\n      const theCurrentQuestion = this.getCurrentQuestion();\n      return (\n        <div>\n          <Question question={theCurrentQuestion.question}\n                    questionNumber={this.props.currentQuestion + 1}\n                    answers={theCurrentQuestion.answers}\n                    answerStyles={this.getAnswerButtonStyles()}\n                    click={this.answerClickHandler}\n                     />\n          <Score currentScore={this.props.score} />\n          {nextButton}\n        </div>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    isStarted: state.isStarted,\n    isFinished: state.isFinished,\n    isValidating: state.isValidating,\n    questions: state.questions,\n    currentQuestion: state.currentQuestion,\n    currentSelection: state.currentSelection,\n    isFetching: state.isFetching,\n    score: state.score\n  }\n};\n\nexport default connect(mapStateToProps)(Quiz);\n","import QuizApi from '../Api.js';\n\nexport const FETCH_QUESTIONS = 'FETCH_QUESTIONS';\nexport const REQUEST_QUESTIONS = 'REQUEST_QUESTIONS';\nexport const FETCH_QUESTION = 'FETCH_QUESTION';\nexport const RECEIVE_QUESTIONS = 'RECEIVE_QUESTIONS';\nexport const INCREMENT_SCORE = 'INCREMENT_SCORE';\nexport const START_VALIDATION = 'START_VALIDATION';\nexport const END_VALIDATION = 'END_VALIDATION';\nexport const END_QUIZ = 'END_QUIZ';\nexport const START_QUIZ = 'START_QUIZ';\nexport const MAKE_SELECTION = 'MAKE_SELECTION';\n\n\nexport const fetchQuestion = () => {\n  return {\n    type: FETCH_QUESTION,\n  };\n};\n\nexport const incrementScore = () => {\n  return {\n    type: INCREMENT_SCORE,\n  };\n};\n\nexport const receiveQuestions = questions => {\n  return {\n    type: RECEIVE_QUESTIONS,\n    payload: questions\n  };\n};\n\nexport const requestQuestions = () => {\n  return {\n    type: REQUEST_QUESTIONS\n  };\n};\n\nexport const endQuiz = () => {\n  return {\n    type: END_QUIZ,\n  };\n};\n\nexport const startQuiz = () => {\n  return {\n    type: START_QUIZ\n  };\n};\n\nexport const makeSelection = (answer) => {\n  return {\n    type: MAKE_SELECTION,\n    payload: answer\n  };\n};\n\nexport const startValidation = () => {\n  return {\n    type: START_VALIDATION\n  };\n};\n\nexport const endValidation = () => {\n  return {\n    type: END_VALIDATION\n  };\n};\n\nexport const fetchQuestions = () => {\n  return dispatch => {\n    dispatch(requestQuestions());\n    const quizApi = new QuizApi();\n    return quizApi.initToken()\n      .then(\n        () => quizApi.fetchQuestions()\n      )\n      .then(\n        response => dispatch(receiveQuestions(response))\n      );\n  };\n};\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport Quiz from './Components/Quiz';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Quiz />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  FETCH_QUESTION,\n  INCREMENT_SCORE,\n  REQUEST_QUESTIONS,\n  END_QUIZ,\n  START_QUIZ,\n  START_VALIDATION,\n  END_VALIDATION,\n  RECEIVE_QUESTIONS,\n  MAKE_SELECTION\n} from './actions';\n\n\nconst initialState = {\n  isStarted: false,\n  isFinished: false,\n  isFetching: false,\n  isValidating: false,\n  questions: [],\n  currentQuestion: 0,\n  currentSelection: null,\n  score: 0\n};\n\nexport const quizAppReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case START_QUIZ:\n      return {\n        ...initialState,\n        isStarted: true\n      }\n    case END_QUIZ:\n      return {\n        ...state,\n        isFinished: true\n      }\n    case REQUEST_QUESTIONS:\n      return {\n        ...state,\n        isFetching: true\n      }\n    case RECEIVE_QUESTIONS:\n      return {\n        ...state,\n        isFetching: false,\n        questions: action.payload,\n        currentQuestion: 0,\n        score: 0\n      }\n    case FETCH_QUESTION:\n      return {\n        ...state,\n        currentQuestion: state.currentQuestion + 1,\n        currentSelection: null\n      }\n    case MAKE_SELECTION:\n      return {\n        ...state,\n        currentSelection: action.payload\n      }\n    case START_VALIDATION:\n      return {\n        ...state,\n        isValidating: true\n      }\n    case END_VALIDATION:\n      return {\n        ...state,\n        isValidating: false\n      }\n    case INCREMENT_SCORE:\n      return {\n        ...state,\n        score: state.score + 1\n      }\n    default:\n      return {\n        ...state\n      };\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { quizAppReducer } from './store/reducer';\n\n\nconst store = createStore(\n\tquizAppReducer,\n  applyMiddleware(thunkMiddleware)\n);\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}